package com.focuschina.ehealth_lib.model.account;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserLoginDao extends AbstractDao<UserLogin, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity UserLogin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property AccountNo = new Property(2, String.class, "accountNo", false, "ACCOUNT_NO");
        public final static Property IdNo = new Property(3, String.class, "idNo", false, "ID_NO");
        public final static Property PhoneNumber = new Property(4, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property IsOnline = new Property(5, boolean.class, "isOnline", false, "IS_ONLINE");
        public final static Property LoginTime = new Property(6, String.class, "loginTime", false, "LOGIN_TIME");
    }


    public UserLoginDao(DaoConfig config) {
        super(config);
    }
    
    public UserLoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SESSION_ID\" TEXT," + // 1: sessionId
                "\"ACCOUNT_NO\" TEXT," + // 2: accountNo
                "\"ID_NO\" TEXT," + // 3: idNo
                "\"PHONE_NUMBER\" TEXT," + // 4: phoneNumber
                "\"IS_ONLINE\" INTEGER NOT NULL ," + // 5: isOnline
                "\"LOGIN_TIME\" TEXT);"); // 6: loginTime
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_user_ACCOUNT_NO ON user" +
                " (\"ACCOUNT_NO\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserLogin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String accountNo = entity.getAccountNo();
        if (accountNo != null) {
            stmt.bindString(3, accountNo);
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(4, idNo);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(5, phoneNumber);
        }
        stmt.bindLong(6, entity.getIsOnline() ? 1L: 0L);
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(7, loginTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserLogin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String accountNo = entity.getAccountNo();
        if (accountNo != null) {
            stmt.bindString(3, accountNo);
        }
 
        String idNo = entity.getIdNo();
        if (idNo != null) {
            stmt.bindString(4, idNo);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(5, phoneNumber);
        }
        stmt.bindLong(6, entity.getIsOnline() ? 1L: 0L);
 
        String loginTime = entity.getLoginTime();
        if (loginTime != null) {
            stmt.bindString(7, loginTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserLogin readEntity(Cursor cursor, int offset) {
        UserLogin entity = new UserLogin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phoneNumber
            cursor.getShort(offset + 5) != 0, // isOnline
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // loginTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserLogin entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoneNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsOnline(cursor.getShort(offset + 5) != 0);
        entity.setLoginTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserLogin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserLogin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserLogin entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
